# ===============================================
# NGINX CONFIGURATION - FRONTEND
# Production-ready configuration for Kubernetes
# ===============================================

# Resolver for Kubernetes DNS
resolver kube-dns.kube-system.svc.cluster.local valid=10s;

server {
    listen 3000;
    server_name localhost;
    root /usr/share/nginx/html;
    index index.html;

    # Configuration pour SPA (Single Page Application)
    location / {
        try_files $uri $uri/ /index.html;
    }

    # Proxy pour les appels API vers le backend
    # In Kubernetes, backend service is named 'backend-service'
    location /api/ {
        # Use variable to force DNS resolution at runtime
        set $backend "backend-service.pokemon-planning.svc.cluster.local";
        proxy_pass http://$backend:8080/api/;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Timeout configurations
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;

        # CORS headers
        add_header Access-Control-Allow-Origin * always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization" always;

        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            return 204;
        }
    }

    # Gestion des fichiers statiques
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
    }

    # Logs
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log warn;
}