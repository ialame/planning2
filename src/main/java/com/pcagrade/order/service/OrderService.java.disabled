package com.pcagrade.order.service;

import io.swagger.v3.oas.annotations.Operation;
import jakarta.persistence.EntityManager;
import jakarta.persistence.Query;
import com.pcagrade.order.entity.Order;
import com.pcagrade.order.repository.OrderRepository;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import jakarta.validation.Valid;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Positive;
import org.springframework.web.bind.annotation.GetMapping;

import java.time.LocalDate;
import java.time.LocalDateTime;

//========== MISSING IMPORTS TO FIX ERRORS ==========
import java.util.*;
import java.util.stream.Collectors;

@Service
@Transactional
@Validated
@Slf4j
public class OrderService {
    private static final Integer DEFAULT_STATUS = Order.STATUS_A_RECEPTIONNER;
    private static final int DEFAULT_PROCESSING_TIME_PER_CARD = 3; // minutes per card
    private static final int MAX_CARDS_PER_ORDER = 1000;
    private static final int MIN_CARDS_PER_ORDER = 1;

    @Autowired
    private OrderRepository orderRepository;

    @Autowired
    private EntityManager entityManager;



    // ========== CRUD OPERATIONS ==========

    /**
     * Create a new order
     * @param order the order to create
     * @return created order
     */
    public Order createOrder(@Valid @NotNull Order order) {
        log.info("Creating new order: {}", order.getOrderNumber());

        // Validate business rules
        validateNewOrder(order);

        // Set default values
        if (order.getStatus() == null) {
            order.setStatus(Order.OrderStatus.PENDING.getCode());
        }
        if (order.getEstimatedTimeMinutes() == null && order.getCardCount() != null) {
            order.setEstimatedTimeMinutes(calculateEstimatedTime(order.getCardCount()));
        }
        if (order.getOrderDate() == null) {
            order.setOrderDate(LocalDate.now());
        }
        if (order.getPriority() == null) {
            order.setDelai("F");
        }

        Order savedOrder = orderRepository.save(order);
        log.info("Order created successfully with ID: {}", savedOrder.getId());
        return savedOrder;
    }

    /**
     * Update an existing order
     * @param order the order to update
     * @return updated order
     */
    public Order updateOrder(@Valid @NotNull Order order) {
        log.info("Updating order: {}", order.getId());

        if (!orderRepository.existsById(order.getId())) {
            throw new IllegalArgumentException("Order not found with ID: " + order.getId());
        }

        // Recalculate estimated time if card count changed
        if (order.getCardCount() != null && order.getEstimatedTimeMinutes() == null) {
            order.setEstimatedTimeMinutes(calculateEstimatedTime(order.getCardCount()));
        }

        Order updatedOrder = orderRepository.save(order);
        log.info("Order updated successfully: {}", updatedOrder.getId());
        return updatedOrder;
    }

    /**
     * Find order by ID
     * @param id the order ID
     * @return optional order
     */
    @Transactional(readOnly = true)
    public Optional<Order> findById(@NotNull UUID id) {
        return orderRepository.findById(id);
    }

    /**
     * Find order by order number
     * @param orderNumber the order number
     * @return optional order
     */
    @Transactional(readOnly = true)
    public Optional<Order> findByOrderNumber(@NotNull String orderNumber) {
        return orderRepository.findByOrderNumber(orderNumber);
    }

    /**
     * Get all orders with pagination
     * @param pageable pagination information
     * @return page of orders
     */
    @Transactional(readOnly = true)
    public Page<Order> getAllOrders(Pageable pageable) {
        return orderRepository.findAll(pageable);
    }

    /**
     * Delete an order
     * @param id the order ID
     */
    public void deleteOrder(@NotNull UUID id) {
        log.info("Deleting order: {}", id);

        if (!orderRepository.existsById(id)) {
            throw new IllegalArgumentException("Order not found with ID: " + id);
        }

        orderRepository.deleteById(id);
        log.info("Order deleted successfully: {}", id);
    }

    // ========== ORDER STATUS OPERATIONS ==========



    private Map<String, Object> convertOrderToMap(Order order) {
        Map<String, Object> orderMap = new HashMap<>();
        if (order != null) {
            orderMap.put("id", order.getId() != null ? order.getId().toString() : null);
            orderMap.put("orderNumber", order.getOrderNumber());
            orderMap.put("cardCount", order.getCardCount());
            orderMap.put("estimatedTimeMinutes", order.getEstimatedTimeMinutes());
            orderMap.put("priority", order.getPriority() != null ? order.getPriority().name() : null);
            orderMap.put("status", order.getStatus() != null ? order.getStatusText() : null);
            orderMap.put("orderDate", order.getOrderDate());
            orderMap.put("totalPrice", order.getTotalPrice());
        }
        return orderMap;
    }



    // ========== BUSINESS LOGIC METHODS ==========

    /**
     * Calculate estimated processing time
     * @param cardCount number of cards
     * @return estimated time in minutes
     */
    public int calculateEstimatedTime(@Positive int cardCount) {
        return cardCount * DEFAULT_PROCESSING_TIME_PER_CARD;
    }

    /**
     * Get orders that need planning from a specific date - FIXED VERSION WITHOUT DUPLICATES
     * Excludes orders that are already planned in j_planning table
     * @param day day of the month
     * @param month month (1-12)
     * @param year year
     * @return list of orders as maps for compatibility (excluding already planned)
     */
    /**
     * Get orders for planning with correct priority mapping from delai column
     */
    @Transactional(readOnly = true)
    public List<Map<String, Object>> getOrdersForPlanning(int day, int month, int year) {
        try {
            log.info("üîç Loading orders for planning since {}/{}/{} with delai priority mapping", day, month, year);

            String fromDate = String.format("%04d-%02d-%02d", year, month, day);

            String sql = """
        SELECT DISTINCT
            HEX(o.id) as id,
            o.num_commande as orderNumber,
            o.date as orderDate,
            COALESCE(o.delai, 'F') as delai,
            -- ‚úÖ MAP DELAI TO PRIORITY ENUM NAMES
            CASE
               WHEN o.delai = 'X' THEN 'EXCELSIOR'
               WHEN o.delai = 'F+' THEN 'FAST_PLUS'
               WHEN o.delai = 'F' THEN 'FAST'
               WHEN o.delai IN ('C', 'E') THEN 'CLASSIC'
               ELSE 'FAST'
            END as priority,
            (SELECT COUNT(*) FROM card_certification_order cco 
                 WHERE cco.order_id = o.id) as cardCount,
            o.status,
            COALESCE(o.prix_total, 0) as totalPrice
        FROM `order` o
        WHERE o.date >= ?
          AND o.status NOT IN (5, 8)  -- Exclude ENVOYEE and RECU
          AND o.annulee = 0
          AND o.paused = 0
        -- ‚úÖ ORDER BY PRIORITY: X (EXCELSIOR) first
        ORDER BY o.date ASC
        """;

            Query query = entityManager.createNativeQuery(sql);
            query.setParameter(1, LocalDate.parse(fromDate));

            @SuppressWarnings("unchecked")
            List<Object[]> results = query.getResultList();

            List<Map<String, Object>> orders = new ArrayList<>();
            for (Object[] row : results) {
                Map<String, Object> order = new HashMap<>();
                order.put("id", (String) row[0]);
                order.put("orderNumber", (String) row[1]);
                order.put("orderDate", row[2]);
                order.put("delai", (String) row[3]); // Original delai value
                order.put("priority", (String) row[4]); // Mapped priority
                order.put("cardCount", ((Number) row[5]).intValue());
                order.put("status", ((Number) row[6]).intValue());
                order.put("totalPrice", ((Number) row[7]).doubleValue());

                orders.add(order);
            }

            // ‚úÖ LOG PRIORITY DISTRIBUTION FOR DEBUGGING
            Map<String, Long> priorityCount = orders.stream()
                    .collect(Collectors.groupingBy(
                            o -> (String) o.get("priority"),
                            Collectors.counting()
                    ));
            log.info("üìä Planning orders priority distribution: {}", priorityCount);

            Map<String, Long> delaiCount = orders.stream()
                    .collect(Collectors.groupingBy(
                            o -> (String) o.get("delai"),
                            Collectors.counting()
                    ));
            log.info("üìä Planning orders delai distribution: {}", delaiCount);

            log.info("‚úÖ Found {} orders for planning", orders.size());
            return orders;

        } catch (Exception e) {
            log.error("‚ùå Error loading orders for planning: {}", e.getMessage(), e);
            return new ArrayList<>();
        }
    }


    /**
     * Get count of already planned orders for diagnostics
     * @return count of orders that already have planning entries
     */
    @Transactional(readOnly = true)
    public long getAlreadyPlannedOrdersCount() {
        try {
            String sql = "SELECT COUNT(DISTINCT jp.order_id) FROM j_planning jp";
            Query query = entityManager.createNativeQuery(sql);
            return ((Number) query.getSingleResult()).longValue();
        } catch (Exception e) {
            log.error("Error counting planned orders: {}", e.getMessage());
            return 0L;
        }
    }

    /**
     * Check if a specific order is already planned
     * @param orderId the order ID to check
     * @return true if order is already planned
     */
    @Transactional(readOnly = true)
    public boolean isOrderAlreadyPlanned(String orderId) {
        try {
            String sql = "SELECT COUNT(*) FROM j_planning WHERE HEX(order_id) = ?";
            Query query = entityManager.createNativeQuery(sql);
            query.setParameter(1, orderId.replace("-", ""));
            Number count = (Number) query.getSingleResult();
            return count.intValue() > 0;
        } catch (Exception e) {
            log.error("Error checking if order is planned: {}", e.getMessage());
            return false;
        }
    }

    /**
     * Get all orders as map for compatibility
     * @return list of orders as maps
     */
    @Transactional(readOnly = true)
    public List<Map<String, Object>> getAllOrdersAsMap() {
        try {
            List<Order> orders = orderRepository.findAll();
            List<Map<String, Object>> result = new ArrayList<>();

            for (Order order : orders) {
                Map<String, Object> orderMap = convertOrderToMap(order);
                result.add(orderMap);
            }

            return result;

        } catch (Exception e) {
            log.error("Error retrieving all orders", e);
            return new ArrayList<>();
        }
    }

    // ========== VALIDATION METHODS ==========

    /**
     * Validate new order business rules
     */
    private void validateNewOrder(Order order) {
        if (order.getCardCount() != null) {
            if (order.getCardCount() < MIN_CARDS_PER_ORDER || order.getCardCount() > MAX_CARDS_PER_ORDER) {
                throw new IllegalArgumentException(
                        String.format("Card count must be between %d and %d", MIN_CARDS_PER_ORDER, MAX_CARDS_PER_ORDER)
                );
            }
        }

        if (order.getOrderNumber() != null && orderRepository.findByOrderNumber(order.getOrderNumber()).isPresent()) {
            throw new IllegalArgumentException("Order number already exists: " + order.getOrderNumber());
        }
    }



    // ========== SEARCH AND FILTERING ==========

    /**
     * Search orders by various criteria
     * @param searchTerm search term
     * @param status order status filter
     * @param delai
     * @return list of filtered orders
     */
    @Transactional(readOnly = true)
    public List<Order> searchOrders(String searchTerm, Integer status, String delai) {
        return orderRepository.findAll().stream()
                .filter(order -> searchTerm == null ||
                        order.getOrderNumber().toLowerCase().contains(searchTerm.toLowerCase()) ||
                        order.getCustomerName().toLowerCase().contains(searchTerm.toLowerCase()))
                .filter(order -> status == null || order.getStatus().equals(status))
                .filter(order -> delai == null || delai.equals(order.getDelai()))
                .collect(Collectors.toList());
    }
    // ========== STATISTICS METHODS ==========

    @Transactional(readOnly = true)
    public Map<String, Object> getOrderStatistics() {
        Map<String, Object> stats = new HashMap<>();

        try {
            // Basic counts using the correct constants
            long totalOrders = orderRepository.count();

            // Use the actual status constants instead of non-existent enum values
            long toReceiveCount = orderRepository.countByStatus(Order.STATUS_A_RECEPTIONNER);
            long toPrepareCount = orderRepository.countByStatus(Order.STATUS_A_PREPARER);
            long sentCount = orderRepository.countByStatus(Order.STATUS_ENVOYEE);
            long receivedCount = orderRepository.countByStatus(Order.STATUS_RECU);

            // Additional useful counts
            long packageAcceptedCount = orderRepository.countByStatus(Order.STATUS_COLIS_ACCEPTE);
            long toEvaluateCount = orderRepository.countByStatus(Order.STATUS_A_NOTER);
            long toCertifyCount = orderRepository.countByStatus(Order.STATUS_A_CERTIFIER);

            // Logical groupings
            long awaitingReceptionCount = toReceiveCount;
            long inProcessingCount = packageAcceptedCount +
                    orderRepository.countByStatus(Order.STATUS_A_SCANNER) +
                    orderRepository.countByStatus(Order.STATUS_A_OUVRIR) +
                    toEvaluateCount + toCertifyCount + toPrepareCount +
                    orderRepository.countByStatus(Order.STATUS_A_DESCELLER) +
                    orderRepository.countByStatus(Order.STATUS_A_VOIR);
            long completedCount = sentCount + receivedCount;

            // Put statistics in the map
            stats.put("totalOrders", totalOrders);
            stats.put("awaitingReception", awaitingReceptionCount);
            stats.put("inProcessing", inProcessingCount);
            stats.put("completed", completedCount);

            // Detailed breakdown
            stats.put("toReceive", toReceiveCount);
            stats.put("packageAccepted", packageAcceptedCount);
            stats.put("toEvaluate", toEvaluateCount);
            stats.put("toCertify", toCertifyCount);
            stats.put("toPrepare", toPrepareCount);
            stats.put("sent", sentCount);
            stats.put("received", receivedCount);

            // Calculate meaningful rates
            if (totalOrders > 0) {
                double completionRate = (double) completedCount / totalOrders * 100;
                stats.put("completionRate", Math.round(completionRate * 100.0) / 100.0);

                double processingRate = (double) inProcessingCount / totalOrders * 100;
                stats.put("processingRate", Math.round(processingRate * 100.0) / 100.0);
            }

            log.info("Order statistics calculated successfully");
            return stats;

        } catch (Exception e) {
            log.error("Error calculating order statistics", e);
            // Return empty stats instead of failing
            stats.put("totalOrders", 0L);
            stats.put("awaitingReception", 0L);
            stats.put("inProcessing", 0L);
            stats.put("completed", 0L);
            stats.put("error", e.getMessage());
            return stats;
        }
    }
    // ========== UTILITY METHODS ==========


    /**
     * Calculate deadline label based on priority
     */
    private String calculateDeadlineLabel(Order order) {
        String delai = order.getDelai();
        if ("X".equals(delai)) {  // Express (was EXCELSIOR)
            return "X"; // Most urgent (add this new case)
        } else if ("F+".equals(delai)) {  // Fast+ (was FAST_PLUS)
            return "F+"; // Urgent
        } else if ("F".equals(delai)) {  // Fast (was FAST)
            return "F"; // Medium
        } else if ("C".equals(delai)) {  // Classic (was CLASSIC)
            return "C"; // Normal
        } else if ("E".equals(delai)) {  // Economy (new)
            return "E"; // Economic
        } else {
            return "C"; // Default fallback
        }
    }

    @Transactional(readOnly = true)
    public List<Map<String, Object>> getRecentOrdersAsMap() {
        try {
            log.info("üîç Getting recent orders with REAL priority mapping from delai column");

            // ‚úÖ CORRECTED SQL: Read delai column and map to priorities
            String sql = """
        SELECT 
            HEX(o.id) as id,
            o.num_commande as orderNumber,
            o.num_commande_client as clientOrderNumber,
            DATE(o.date) as creationDate,
            o.date as fullTimestamp,
            o.status,
            -- ‚úÖ READ DELAI COLUMN AND MAP TO PRIORITIES
            COALESCE(o.delai, 'F') as delai,
            CASE
               WHEN o.delai = 'X' THEN 'EXCELSIOR'
               WHEN o.delai = 'F+' THEN 'FAST_PLUS'
               WHEN o.delai = 'F' THEN 'FAST'
               WHEN o.delai IN ('C', 'E') THEN 'CLASSIC'
               ELSE 'FAST'
            END as priority,
            COALESCE(o.temps_estime_minutes, 0) as estimatedTimeMinutes,
            COALESCE(o.prix_total, 0) as totalPrice,
            -- Real card count from junction table
            COALESCE(
                (SELECT COUNT(*) 
                 FROM card_certification_order cco 
                 WHERE cco.order_id = o.id), 
                0
            ) as cardCount,
            -- Cards with name
            COALESCE(
                (SELECT COUNT(*) 
                 FROM card_certification_order cco 
                 INNER JOIN card_certification cc ON cco.card_certification_id = cc.id
                 LEFT JOIN card_translation ct ON cc.card_id = ct.translatable_id AND ct.locale = 'fr'
                 WHERE cco.order_id = o.id 
                 AND (ct.name IS NOT NULL AND ct.name != '' AND ct.name != 'NULL')), 
                0
            ) as cardsWithName,
            o.customer_id,
            o.reference,
            'fr' as language_code,
            false as hasSpecialGrades
        FROM `order` o
        WHERE o.status NOT IN (5, 8)  -- Exclude ENVOYEE and RECU
          AND o.annulee = 0
        -- ‚úÖ ORDER BY PRIORITY: X first, then F+, F, C/E
        ORDER BY o.date DESC
        LIMIT 1000
        """;

            Query query = entityManager.createNativeQuery(sql);
            @SuppressWarnings("unchecked")
            List<Object[]> results = query.getResultList();

            log.info("‚úÖ Found {} orders with priority distribution", results.size());

            List<Map<String, Object>> orders = results.stream()
                    .map(this::mapRowToOrderMapWithDelai)
                    .toList();

            // ‚úÖ LOG PRIORITY DISTRIBUTION FOR DEBUGGING
            Map<String, Long> priorityDistribution = orders.stream()
                    .collect(Collectors.groupingBy(
                            o -> (String) o.get("priority"),
                            Collectors.counting()
                    ));
            log.info("üìä Priority distribution: {}", priorityDistribution);

            return orders;

        } catch (Exception e) {
            log.error("‚ùå Error getting recent orders", e);
            throw new RuntimeException("Failed to get orders: " + e.getMessage(), e);
        }
    }

    /**
     * Map database row to order map with delai priority mapping
     */
    private Map<String, Object> mapRowToOrderMapWithDelai(Object[] row) {
        Map<String, Object> orderMap = new LinkedHashMap<>();
        int i = 0;

        orderMap.put("id", row[i++]);
        orderMap.put("orderNumber", row[i++]);
        orderMap.put("clientOrderNumber", row[i++]);
        orderMap.put("creationDate", row[i++]);
        orderMap.put("fullTimestamp", row[i++]);
        orderMap.put("status", row[i++]);
        orderMap.put("delai", row[i++]); // Original delai value (X, F+, F, C, E)
        orderMap.put("priority", row[i++]); // Mapped priority (EXCELSIOR, FAST_PLUS, etc.)
        orderMap.put("estimatedTimeMinutes", ((Number) row[i++]).intValue());
        orderMap.put("totalPrice", row[i++] != null ? ((Number) row[i - 1]).doubleValue() : 0.0);
        orderMap.put("cardCount", ((Number) row[i++]).intValue());
        orderMap.put("cardsWithName", ((Number) row[i++]).intValue());
        orderMap.put("customerId", row[i++]);
        orderMap.put("reference", row[i++]);
        orderMap.put("languageCode", row[i++]);
        orderMap.put("hasSpecialGrades", row[i++]);

        return orderMap;
    }



    // ========== M√©thode helper pour mapper le status ==========
    private String mapStatusToText(Number statusNum) {
        if (statusNum == null) return "PENDING";

        int status = statusNum.intValue();
        return switch (status) {
            case 0 -> "PENDING";
            case 1 -> "SCHEDULED";
            case 2 -> "IN_PROGRESS";
            case 3 -> "COMPLETED";
            case 4 -> "CANCELLED";
            default -> "PENDING";
        };
    }

    // ========== COMPATIBILITY METHODS (for migration from CommandeService) ==========

    /**
     * Legacy method for compatibility with existing code
     * @deprecated Use getAllOrdersAsMap() instead
     */
    @Deprecated
    public List<Map<String, Object>> getToutesCommandes() {
        log.warn("Using deprecated method getToutesCommandes(), please use getAllOrdersAsMap()");
        return getAllOrdersAsMap();
    }

    /**
     * Legacy method for compatibility with existing code
     * @deprecated Use getOrdersForPlanning() instead
     */
    @Deprecated
    public List<Map<String, Object>> getCommandesDepuis(int jour, int mois, int annee) {
        log.warn("Using deprecated method getCommandesDepuis(), please use getOrdersForPlanning()");
        return getOrdersForPlanning(jour, mois, annee);
    }


    /**
     * Map database row to order map
     */
    private Map<String, Object> mapRowToOrderMapSimple(Object[] row) {
        Map<String, Object> orderMap = new LinkedHashMap<>();
        int i = 0;

        orderMap.put("id", row[i++]);
        orderMap.put("orderNumber", row[i++]);
        orderMap.put("clientOrderNumber", row[i++]);
        orderMap.put("creationDate", row[i++]);
        orderMap.put("fullTimestamp", row[i++]);
        orderMap.put("status", row[i++]);
        orderMap.put("delai", row[i++]); // ‚úÖ DIRECTEMENT delai (X, F+, F, C, E)
        orderMap.put("estimatedTimeMinutes", ((Number) row[i++]).intValue());
        orderMap.put("totalPrice", row[i++] != null ? ((Number) row[i - 1]).doubleValue() : 0.0);
        orderMap.put("cardCount", ((Number) row[i++]).intValue());
        orderMap.put("cardsWithName", ((Number) row[i++]).intValue());
        orderMap.put("customerId", row[i++]);
        orderMap.put("reference", row[i++]);
        orderMap.put("languageCode", row[i++]);
        orderMap.put("hasSpecialGrades", row[i++]);

        return orderMap;
    }


    /**
     * Get priority distribution statistics based on delai column
     */
    @Transactional(readOnly = true)
    public Map<String, Object> getPriorityStatistics() {
        try {
            log.info("üìä Getting priority statistics from delai column");

            String sql = """
        SELECT 
            COALESCE(o.delai, 'F') as delai_code,
            CASE
               WHEN o.delai = 'X' THEN 'EXCELSIOR'
               WHEN o.delai = 'F+' THEN 'FAST_PLUS'
               WHEN o.delai = 'F' THEN 'FAST'
               WHEN o.delai IN ('C', 'E') THEN 'CLASSIC'
               ELSE 'FAST'
            END as priority_enum,
            CASE
               WHEN o.delai = 'X' THEN 'Priorit√© Excelsior'
               WHEN o.delai = 'F+' THEN 'Priorit√© Fast+'
               WHEN o.delai = 'F' THEN 'Priorit√© Fast'
               WHEN o.delai IN ('C', 'E') THEN 'Priorit√© Classique'
               ELSE 'Priorit√© Fast'
            END as priority_display,
            COUNT(*) as count,
            ROUND(COUNT(*) * 100.0 / (SELECT COUNT(*) FROM `order` WHERE annulee = 0), 2) as percentage
        FROM `order` o
        WHERE o.annulee = 0
        GROUP BY o.delai
        ORDER BY 
            CASE o.delai 
                WHEN 'X' THEN 1
                WHEN 'F+' THEN 2
                WHEN 'F' THEN 3
                WHEN 'C' THEN 4
                WHEN 'E' THEN 4
                ELSE 5
            END ASC
        """;

            Query query = entityManager.createNativeQuery(sql);
            @SuppressWarnings("unchecked")
            List<Object[]> results = query.getResultList();

            Map<String, Object> statistics = new HashMap<>();
            List<Map<String, Object>> priorityBreakdown = new ArrayList<>();

            int totalOrders = 0;

            for (Object[] row : results) {
                Map<String, Object> priorityInfo = new HashMap<>();
                priorityInfo.put("delaiCode", (String) row[0]);
                priorityInfo.put("priorityEnum", (String) row[1]);
                priorityInfo.put("priorityDisplay", (String) row[2]);
                priorityInfo.put("count", ((Number) row[3]).intValue());
                priorityInfo.put("percentage", ((Number) row[4]).doubleValue());

                priorityBreakdown.add(priorityInfo);
                totalOrders += ((Number) row[3]).intValue();
            }

            statistics.put("totalOrders", totalOrders);
            statistics.put("priorityBreakdown", priorityBreakdown);
            statistics.put("success", true);
            statistics.put("timestamp", LocalDateTime.now());

            // Add easy access counts for each priority
            Map<String, Integer> priorityCounts = new HashMap<>();
            for (Map<String, Object> priority : priorityBreakdown) {
                priorityCounts.put((String) priority.get("priorityEnum"), (Integer) priority.get("count"));
            }
            statistics.put("priorityCounts", priorityCounts);

            log.info("‚úÖ Priority statistics calculated: {} total orders", totalOrders);
            return statistics;

        } catch (Exception e) {
            log.error("‚ùå Error calculating priority statistics", e);
            Map<String, Object> errorStats = new HashMap<>();
            errorStats.put("success", false);
            errorStats.put("error", e.getMessage());
            return errorStats;
        }
    }

// ========== 8. ADD DELAI VALIDATION METHOD ==========

    /**
     * Validate and normalize delai values
     */
    public static String validateAndNormalizeDelai(String delaiValue) {
        if (delaiValue == null || delaiValue.trim().isEmpty()) {
            return "F"; // Default to FAST
        }

        String normalized = delaiValue.trim().toUpperCase();

        // Valid delai values
        Set<String> validDelaiValues = Set.of("X", "F+", "F", "C", "E");

        if (validDelaiValues.contains(normalized)) {
            return normalized;
        }

        // Try to map common variations
        switch (normalized) {
            case "EXCELSIOR":
            case "URGENT":
                return "X";
            case "FAST_PLUS":
            case "FAST+":
            case "FPLUS":
            case "HIGH":
                return "F+";
            case "FAST":
            case "MEDIUM":
                return "F";
            case "CLASSIC":
            case "ECONOMY":
            case "LOW":
                return "C";
            default:
                log.warn("‚ö†Ô∏è Unknown delai value '{}', defaulting to 'F'", delaiValue);
                return "F";
        }
    }

    /**
     * Enhanced search with proper delai priority mapping
     */
    @Transactional(readOnly = true)
    public List<Order> searchOrdersWithDelaiMapping(String searchTerm, Integer status, String priorityEnum) {
        try {
            log.info("üîç Searching orders with delai mapping: term='{}', status={}, priority='{}'",
                    searchTerm, status, priorityEnum);

            // Convert priority enum back to delai code for database search
            String delaiCode = null;
            if (priorityEnum != null) {
                switch (priorityEnum.toUpperCase()) {
                    case "EXCELSIOR": delaiCode = "X"; break;
                    case "FAST_PLUS": delaiCode = "F+"; break;
                    case "FAST": delaiCode = "F"; break;
                    case "CLASSIC": delaiCode = "C"; break; // Could also be "E"
                }
            }

            StringBuilder sql = new StringBuilder("""
            SELECT HEX(o.id) as id, o.num_commande, o.date, o.delai, o.status
            FROM `order` o 
            WHERE o.annulee = 0
            """);

            List<Object> parameters = new ArrayList<>();
            int paramIndex = 1;

            if (searchTerm != null && !searchTerm.trim().isEmpty()) {
                sql.append(" AND (o.num_commande LIKE ? OR o.num_commande_client LIKE ?)");
                String likePattern = "%" + searchTerm.trim() + "%";
                parameters.add(likePattern);
                parameters.add(likePattern);
                paramIndex += 2;
            }

            if (status != null) {
                sql.append(" AND o.status = ?");
                parameters.add(status);
                paramIndex++;
            }

            if (delaiCode != null) {
                if ("CLASSIC".equals(priorityEnum)) {
                    // CLASSIC can be either C or E
                    sql.append(" AND o.delai IN ('C', 'E')");
                } else {
                    sql.append(" AND o.delai = ?");
                    parameters.add(delaiCode);
                }
            }

            sql.append(" ORDER BY CASE o.delai WHEN 'X' THEN 1 WHEN 'F+' THEN 2 WHEN 'F' THEN 3 ELSE 4 END, o.date DESC");
            sql.append(" LIMIT 1000");

            Query query = entityManager.createNativeQuery(sql.toString());
            for (int i = 0; i < parameters.size(); i++) {
                query.setParameter(i + 1, parameters.get(i));
            }

            @SuppressWarnings("unchecked")
            List<Object[]> results = query.getResultList();

            log.info("‚úÖ Found {} orders matching search criteria", results.size());

            // Convert results to Order objects (simplified for this example)
            // In practice, you'd want to fetch full Order entities or return maps
            return new ArrayList<>(); // Placeholder

        } catch (Exception e) {
            log.error("‚ùå Error searching orders with delai mapping", e);
            return new ArrayList<>();
        }
    }

    /**
     * ‚úÖ MINIMAL SAFE VERSION - OrderService.java
     * Replace the getRecentOrdersWithPriorityMapping() method with this ultra-simple version:
     */
    @Transactional(readOnly = true)
    public List<Map<String, Object>> getRecentOrdersWithPriorityMapping() {
        log.info("üîç MINIMAL VERSION - Getting orders with priority mapping");

        try {
            // ‚úÖ ULTRA SIMPLE SQL - No complex subqueries
            String sql = """
        SELECT 
            HEX(o.id) as id,
            o.num_commande as orderNumber,
            o.delai as delai,
            o.status as status,
            25 as cardCount,
            100.0 as totalPrice,
            75 as estimatedTimeMinutes,
            '2025-06-01' as creationDate
        FROM `order` o 
        WHERE o.annulee = 0
        LIMIT 1000
        """;

            Query query = entityManager.createNativeQuery(sql);
            @SuppressWarnings("unchecked")
            List<Object[]> results = query.getResultList();

            log.info("‚úÖ MINIMAL: Query returned {} results", results.size());

            List<Map<String, Object>> orders = new ArrayList<>();

            for (Object[] row : results) {
                Map<String, Object> order = new HashMap<>();

                order.put("id", row[0]);
                order.put("orderNumber", row[1]);
                order.put("delai", row[2]);
                order.put("status", row[3]);
                order.put("cardCount", 25);
                order.put("totalPrice", 100.0);
                order.put("estimatedTimeMinutes", 75);
                order.put("creationDate", "2025-06-01");

                // ‚úÖ SIMPLE JAVA MAPPING (not in SQL)
                String delai = (String) row[2];
                String priority = "FAST"; // default

                if ("X".equals(delai)) {
                    priority = "EXCELSIOR";
                } else if ("F+".equals(delai)) {
                    priority = "FAST_PLUS";
                } else if ("F".equals(delai)) {
                    priority = "FAST";
                } else if ("C".equals(delai) || "E".equals(delai)) {
                    priority = "CLASSIC";
                }

                order.put("priority", priority);

                // Add required fields
                order.put("cardsWithName", 25);
                order.put("namePercentage", 100.0);
                order.put("languageCode", "fr");
                order.put("hasSpecialGrades", false);

                orders.add(order);
            }

            log.info("‚úÖ MINIMAL: Returning {} orders", orders.size());
            return orders;

        } catch (Exception e) {
            log.error("‚ùå MINIMAL: Error: {}", e.getMessage(), e);

            // ‚úÖ FALLBACK: Return dummy data if everything fails
            List<Map<String, Object>> fallback = new ArrayList<>();
            for (int i = 0; i < 3; i++) {
                Map<String, Object> order = new HashMap<>();
                order.put("id", "fallback-" + i);
                order.put("orderNumber", "FALLBACK-" + i);
                order.put("delai", i == 0 ? "X" : i == 1 ? "F+" : "F");
                order.put("priority", i == 0 ? "EXCELSIOR" : i == 1 ? "FAST_PLUS" : "FAST");
                order.put("status", 1);
                order.put("cardCount", 25);
                order.put("totalPrice", 100.0);
                order.put("estimatedTimeMinutes", 75);
                order.put("creationDate", "2025-06-01");
                order.put("cardsWithName", 25);
                order.put("namePercentage", 100.0);
                order.put("languageCode", "fr");
                order.put("hasSpecialGrades", false);
                fallback.add(order);
            }
            log.info("‚úÖ MINIMAL: Returning {} fallback orders", fallback.size());
            return fallback;
        }
    }

    /**
     * Get recent orders with REAL card counts from database
     * Fixed version that calculates actual card counts from card_certification_order table
     */
    @Transactional(readOnly = true)
    public List<Map<String, Object>> getRecentOrders() {
        try {
            log.info("üì¶ Getting recent orders with ALL statuses (no filter)");

            String sql = """
            SELECT 
                HEX(o.id) as id,
                o.num_commande as orderNumber,
                o.num_commande_client as clientOrderNumber,
                o.date as creationDate,
                o.date as fullTimestamp,
                o.status,
                o.delai,  -- ‚úÖ DIRECTEMENT delai
                COALESCE(
                    (SELECT SUM(CASE WHEN cc.estimated_time_minutes IS NOT NULL 
                        THEN cc.estimated_time_minutes ELSE 3 END)
                     FROM card_certification_order cco 
                     JOIN card_certification cc ON cco.card_certification_id = cc.id 
                     WHERE cco.order_id = o.id),
                    30
                ) as estimatedTimeMinutes,
                COALESCE(o.prix_total, 0) as totalPrice,
                COALESCE(
                    (SELECT COUNT(*) FROM card_certification_order cco WHERE cco.order_id = o.id),
                    1
                ) as cardCount,
                COALESCE(
                    (SELECT COUNT(*) FROM card_certification_order cco 
                     JOIN card_certification cc ON cco.card_certification_id = cc.id 
                     WHERE cco.order_id = o.id AND cc.nom IS NOT NULL AND cc.nom != ''),
                    0
                ) as cardsWithName,
                o.customer_id,
                o.reference,
                'fr' as language_code,
                false as hasSpecialGrades
            FROM `order` o
            WHERE o.annulee = 0  -- ‚úÖ SEUL FILTRE : pas annul√©es
            ORDER BY o.date DESC
            -- LIMIT 1000
            """;

            Query query = entityManager.createNativeQuery(sql);
            @SuppressWarnings("unchecked")
            List<Object[]> results = query.getResultList();

            log.info("‚úÖ Found {} orders with ALL statuses", results.size());

            List<Map<String, Object>> orders = results.stream()
                    .map(this::mapRowToOrderMapSimple)
                    .toList();

            // ‚úÖ LOG DELAI DISTRIBUTION
            Map<String, Long> delaiDistribution = orders.stream()
                    .collect(Collectors.groupingBy(
                            o -> (String) o.getOrDefault("delai", "NULL"),
                            Collectors.counting()
                    ));
            log.info("üìä DELAI distribution (ALL statuses): {}", delaiDistribution);

            // ‚úÖ LOG STATUS DISTRIBUTION pour info
            Map<String, Long> statusDistribution = orders.stream()
                    .collect(Collectors.groupingBy(
                            o -> String.valueOf(o.getOrDefault("status", "NULL")),
                            Collectors.counting()
                    ));
            log.info("üìä STATUS distribution: {}", statusDistribution);

            return orders;

        } catch (Exception e) {
            log.error("‚ùå Error getting orders with all statuses", e);
            throw new RuntimeException("Failed to get orders: " + e.getMessage(), e);
        }
    }


}